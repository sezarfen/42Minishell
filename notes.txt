$$		commands that will be handled		$$

echo	-n
cd
pwd
export
unset
env
exit

$$		other stuffs	$$

$$$$$$$$$$$$$$$$$
|  					-> pipe
<  					-> stdin from file
>  					-> write on file 
<< 					-> heredoc
>> 					-> append işlemi yapıyor
$$$$$$$$$$$$$$$$$

/*

exec commandları o anki process ' i bitiriyor
o yüzden child process'e geçmemiz lazım

*/


>> (append) modunda dosyayı açtığımız zaman open(file_name, O_RDWR | O_APPEND) şeklinde açabiliriz
ardından girilen girdiden önce /n atmak gerekiyor olabilir


---YAPILACAKLAR---

asd=123 gibi gelen değişikliklerde '=' işaretini algılayarak, set işlemi yapılabilir


heredoc için birden fazla dosya açmamız gerektiği zaman o anki parser'ın kaçıncı parser
olduğuna eklersek .heredoc_number.txt bir dosya açma işlemi yapabiliriz İnşaAllah

dosyayı bir kez append sonra düz output redirect ' te kullanmaya bakmak lazım

çıkış noktalarına rl_clear_history atmayı unutmamak lazım


// USEFUL EXECUTERS

//////////////////////////////////////////////////////

/*
void	to_execute(t_parser *parser, char **env, t_ee **ee) // parser_len iş yapacaktır, fork ve pipe sayısını belirtir
{
	int		fd_in;
	int		fd[2];
	pid_t	pid;
	t_parser	*temp;

	fd_in = 0;
	while (parser)
	{
		pipe(fd);
		pid = fork();
		if (pid == 0)
		{
			dup2(fd_in, 0); // set input to previous one // it is 0 at the beginning
			if (parser->next)
				dup2(fd[1], 1); // set output if there is pipe
			close(fd[0]);
			if (parser->is_builtin || ft_iscontain(parser->cmds[0], '='))
				child_builtins(parser, ee);
			else
				execute_fork(parser, env);
			exit(0);
		}
		if (!parser->next) // indicates last node
			temp = parser;
		fd_in = fd[0];
		close(fd[1]);
		execute_builtin(parser, ee);
		parser = parser->next;
	}
	wait_and_set_status(pid, &((*ee)->env), temp);
}
*/
/*
void	to_execute(t_parser *parser, char **env, t_ee **ee)
{
	int		*fds;
	pid_t	pid;
	int		i;
	int		fd_temp;

	fds = set_fds(parser); // will close them at the end
	i = 1;
	fd_temp = 0;
	while (parser)
	{
		pid = fork();
		if (pid == 0)
		{	// stdin filenos -> 1 3 5 7.. // stdout filenos -> 0 2 4 6..
			dup2(fd_temp, STDIN_FILENO); 
			if (parser->next)
				dup2(fds[i + 1], STDOUT_FILENO);
			if (parser->is_builtin || ft_iscontain(parser->cmds[0], '='))
				child_builtins(parser, ee);
			else
				execute_fork(parser, env);
			exit(0);
		}
		fd_temp = fds[i];
		execute_builtin(parser, ee);
		i += 2;
		parser = parser->next;
	}
	wait_and_set_status(pid, &((*ee)->penv), parser);
	while (i >= 0)
		close(fds[i--]);
}
*/

/*
void	to_execute(t_parser *parser, char **env, t_ee **ee) // parser_len iş yapacaktır, fork ve pipe sayısını belirtir
{
	int		fd_in;
	int		fd[2];
	pid_t	pid;
	t_parser	*temp;

	fd_in = 0;
	while (parser)
	{
		pipe(fd);
		pid = fork();
		if (pid == 0)
		{
			dup2(fd_in, 0); // set input to previous one // it is 0 at the beginning
			if (parser->next)
				dup2(fd[1], 1); // set output if there is pipe
			close(fd[0]);
			if (parser->is_builtin || ft_iscontain(parser->cmds[0], '='))
				child_builtins(parser, ee);
			else
				execute_fork(parser, env);
			exit(0);
		}
		if (!parser->next) // indicates last node
			temp = parser;
		fd_in = fd[0];
		close(fd[1]);
		execute_builtin(parser, ee);
		parser = parser->next;
	}
	wait_and_set_status(pid, &((*ee)->env), temp);
}
*/

/*
void	to_execute(t_parser *parser, char **env, t_ee **ee) // parser_len iş yapacaktır, fork ve pipe sayısını belirtir
{
	int		i;
	int		len;
	pid_t	pid;
	int		temp_fd;

	len = parser_len(parser); // will indicate number of commands will be executed
	int fd[len][2];
	i = 0;
	temp_fd = 0;
	while (i < len)
		pipe(fd[i]);
	i = 0;
	while (parser)
	{
		pid = fork();
		if (pid == 0)
		{
			dup2(temp_fd, STDIN_FILENO);
			if (parser->next)
				dup2(fd[i][1], STDOUT_FILENO);
			close(fd[i][0]);
			///		EXECUTE PART	///
			if (parser->is_builtin || ft_iscontain(parser->cmds[0], '='))
				child_builtins(parser, ee);
			else
				execute_fork(parser, env);
			exit(0);
		}
		temp_fd = fd[i][0];
		close(fd[i][1]);
		execute_builtin(parser, ee);
		parser = parser->next;
		i++;
	}
	i = 0;
	while (i < len)
	{
		close(fd[i][0]);
		close(fd[i][1]);
	}
	wait_and_set_status(pid, &((*ee)->env), parser);
}
*/


/*  LAST TO_EXECUTE COMMAND
void	to_execute(t_parser *parser, char **env, t_ee **ee) // parser_len iş yapacaktır, fork ve pipe sayısını belirtir
{
	int		fd_in;
	int		fd[2];
	pid_t	pid;
	t_parser	*temp;

	fd_in = 0;
	while (parser)
	{
		pipe(fd);
		pid = fork();
		if (pid == 0)
		{
			dup2(fd_in, 0); // set input to previous one // it is 0 at the beginning
			if (parser->next)
				dup2(fd[1], 1); // set output if there is pipe
			close(fd[0]);
			if (parser->is_builtin || ft_iscontain(parser->cmds[0], '='))
				child_builtins(parser, ee);
			else
				execute_fork(parser, env);
			exit(0);
		}
		if (!parser->next) // indicates last node
			temp = parser;
		fd_in = fd[0];
		close(fd[1]);
		execute_builtin(parser, ee);
		parser = parser->next;
	}
	wait_and_set_status(pid, &((*ee)->env), temp);
}

*/

/*

// OLD EXECUTE // ONLY WORKS FOR 2 PIPES
void	to_execute(t_parser *parser, char **env, t_ee **ee) // parser_len iş yapacaktır, fork ve pipe sayısını belirtir
{
	int		len;
	int		i;
	int		fd[2];
	pid_t	pid;

	len = parser_len(parser);
	pipe(fd);
	i = 0;
	while (parser)
	{
		pid = fork();
		if (pid == 0) // indicates child process
		{
			set_pipe(fd, i, len);
			if (parser->is_builtin || ft_iscontain(parser->cmds[0], '='))
				child_builtins(parser);
			else
				execute_fork(parser, env);
			exit(0);
		}
		else
			execute_builtin(parser, &(*ee));




		parser = parser->next;
		i++;
		if (i % 2 == 0 || i == len)
		{
			close(fd[1]);
			close(fd[0]);
		}
		wait_and_set_status(pid, &((*ee)->env), i, len);
	}
}

*/
///////////////////////////////////////////////////////////////

/*
		LEXER İÇERİKLERİNİ CLEANER ' A SOKMA [DAHA SONRA YAPILMASI DAHA DOĞRU OLABİLİR]
		while (lexer->tokens[i])
		{
			lexer->tokens[i] = cleaner(lexer->tokens[i], env);
			i++;
		}

		// PARSER İÇERİKLERİNİ EKRANA YAZDIRMA
		i = 0;
		t_parser *temp = parser;
		while (temp)
		{
			while (temp->cmds[i])
				printf("(%s) ", temp->cmds[i++]);
			i = 0;
			temp = temp->next;
			if (temp)
				printf("\n---pipe---\n");
		}

		// PRINT THE CLEANED PARSER
		printf("\n=========CLEANED PARSER=========\n");
		t_parser	*temp;
		int			i;
		temp = parser;
		i = 0;
		while (temp)
		{
			while (temp->cmds[i])
			{
				temp->cmds[i] = cleaner(temp->cmds[i], env_list);
				printf("%s ", temp->cmds[i++]);
			}
			i = 0;
			printf("\n");
			temp = temp->next;
			if (temp)
				printf("\n|==(pipe found)==|\n");
		}

		// DIFFERENT PARSER PRINT (WITH ATTRIBUTES)

		int i = 0;
		t_parser *temp = parser;
		while (temp)
		{
			while (temp->cmds[i])
				printf("(%s) ", temp->cmds[i++]);
			printf("\n");
			printf("fd_in:%d\nfd_out:%d\nis_builtin:%d\nhd_in:%d\n", temp->fd_in , temp->fd_out, temp->is_builtin, temp->hd_in);
			i = 0;
			temp = temp->next;
			if (temp)
				printf("\n---pipe---\n");
		}
*/
/////////////////////////////////////////
	/*
		int i = 0;
		t_parser *temp = parser;
		while (temp)
		{
			while (temp->cmds[i])
				printf("(%s) ", temp->cmds[i++]);
			printf("\n");
			printf("fd_in:%d\nfd_out:%d\nis_builtin:%d\nhd_in:%d\n", temp->fd_in , temp->fd_out, temp->is_builtin, temp->hd_in);
			i = 0;
			temp = temp->next;
			if (temp)
				printf("\n---pipe---\n");
		}
	*/
//////////////////////////////////////////



// cat | cat | ls
case'inde iki kere input aldıktan sonra kapanmasının sebebi
pipeların bir uçları kapandıkan sonra write() ile diğer uca yazmaya çalışınca
write -> SIGPIPE hatası veriyor ve ardından program kapanıyor o yüzden daha fazla
input almayı beklemiyor, her bir cat için 1 input aldıktan sonra program terminate oluyor

EXPORT VE ENV ' nin ekrana yazdırma fonksiyonlarını child process ' de yapmak lazım